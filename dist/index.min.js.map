{"version":3,"sources":["webpack://noreact/webpack/universalModuleDefinition","webpack://noreact/webpack/bootstrap","webpack://noreact/./src/MVVM.ts","webpack://noreact/./src/VNode.ts","webpack://noreact/./src/attribute.ts","webpack://noreact/./src/dev.ts","webpack://noreact/./src/diff.ts","webpack://noreact/./src/event-center.ts","webpack://noreact/./src/index.ts","webpack://noreact/./src/react.ts","webpack://noreact/./src/refresh.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","diff_1","event_center_1","VNode_1","react_1","refresh_1","dev_1","__importDefault","MVVM","$props","this","$eventRegister","$children","$isdirty","$hasRenderedDom","$mountDom","$isDestroyed","toString","$id","GetId","$onInit","$onRendered","$onDestroyed","$emitUp","event","data","$root","EmitUp","$emitDown","EmitDown","$on","callback","push","RegisterEvent","$broadcast","TriggerEvent","$Trigger","_i","arguments","length","cbs","forEach","cb","apply","$ToDom","$DoRender","ToDom","$ToHtml","$Render","ToHtml","$GetRoot","$SetChildren","children","$GetChildren","$Dirty","InsertQueue","$GetDirty","$ApplyRefresh","default","OnChange","React","ChangeMode","old","target","newroot","$compareVNode","$useOld","doms","res_1","GetParent","GetSiblingDom","isparent","_a","dom","append","parentNode","insertBefore","Doms","remove","isMulti","SetParent","oldmvvms","GetAllMvvm","Rendered","newmvvms","id","keys","startsWith","$watchObject","$attachedVNode","VNode","SetMvvm","obj","_this","watchers_1","descriptor","getOwnPropertyDescriptor","configurable","value_1","indexOf","set","val","item","$watchArray","arr","watchers","$overwriteArrayMethods","methodname","method","oldNode","newNode","GetType","ApplyAttrDiff","GetAttrs","$diff","GetChildren","instance","GetInstance","newInstance","$compareProps","$compareChildren","$IsParentOf","mvvm","ps1","ps2","keys1","keys2","map_1","different_1","$compareProp","c1","c2","Array","p1","p2","olds","news","parent","opers","Diff","index","state","oldValue","newValue","newValueOrigin","InsertVNode","$devNew","RemoveVNode","isdeprecated","$devDelete","Destroy","vnode","mvvms","nextmvvm","parent_1","GetFirstChildMvvm","GetNearestAncestorMvvm","$Rendered","$Destroy","$IsDestroyed","$AttachVNode","$AppendTo","elem","document","querySelector","AddMvvm","$GetMountDom","$GetAttachedVNode","left","right","GetAttr","constructor","GetTag","GetText","GetProps","attribute_1","type","tag","text","attrs","isDestroyed","doms_1","child","concat","SetTag","SetText","component","domchange","splice","removeChild","SetChildren","IsDestroyed","Ref","current","SetAttr","newAttrs","eventName","GetEventAttrName","isEvent","removeEventListener","RemoveAttr","style","oldStyle","newStyle","key_1","key_2","addEventListener","ApplyAttr","innerhtmls_1","attrStr","SerializeAttr","res","join","innerhtmls_2","elem_1","createElement","appendChild","children_1","createTextNode","_b","AttachDom","total_1","VNODE_ID","$isServerRender","ServerRender","isServerRender","applyAttr","className","setAttribute","ref","HTMLInputElement","removeAttr","serializeAttr","str","attr","test","slice","toLowerCase","dev","Dev","roots","listeners","Subscribe","listener","init","toJson","getMvvm","Unsubscribe","filter","vnodeObj_1","props","name_1","data_1","Error","extra","instances","__noreact_dev","oldset","newset","compare","o2n","n2o","square","row","j","fromRow","fromColumn","initSquare","findShortest","lastnum","same","p3","min","Math","column","states","unit","getOpers","reverse","events","func","args","MVVM_1","Fragment","NoReact","Function","Elem","allchildren","flatten","prefix","textnode","counter","promise","queue","tempQueue","maxLoop","Promise","resolve","reject","then","sort","m1","m2","Refresh"],"mappings":"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","file":"index.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"noreact\"] = factory();\n\telse\n\t\troot[\"noreact\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.ts\");\n","import { Diff } from './diff';\nimport { RegisterEvent, TriggerEvent } from './event-center';\nimport { VNode } from './VNode';\nimport { React, GetId } from './react';\nimport { InsertQueue } from './refresh';\nimport Dev from \"./dev\";\n\nexport abstract class MVVM<T> {\n    private $root: VNode;\n    private $attachedVNode: VNode;\n    /**组件内部的事件注册中心 */\n    private $eventRegister: { [event: string]: Function[] } = {};\n    /**该组件拥有的子级虚拟树 */\n    protected $children: VNode[] = [];\n    private $isdirty = false;\n    protected $props: T;\n    private $hasRenderedDom = false;\n    private $mountDom: HTMLElement = null;\n    private $isDestroyed = false;\n    protected $id: number;\n\n    constructor($props: T) {\n        if (toString.call($props) == '[object Object]') {\n            this.$props = $props;\n        } else {\n            (this.$props as any) = {};\n        }\n        this.$id = GetId();\n    }\n    /**初始化函数 */\n    protected $onInit(): void { }\n    /**渲染完成后该方法会被调用，此时elem成员变量才可以被访问到 */\n    protected $onRendered(): void { }\n    /**销毁函数 */\n    protected $onDestroyed(): void { }\n    /**该组建的渲染方法，该方法必须返回一个虚拟树 */\n    protected abstract $Render(): VNode;\n\n    /**向所有父级发送消息 */\n    protected $emitUp(event: string, data?: any) {\n        this.$root.EmitUp(event, data, this);\n    }\n    /**向所有子级发送消息 */\n    protected $emitDown(event: string, data?: any) {\n        this.$root.EmitDown(event, data, this);\n    }\n    /**监听事件 */\n    protected $on(\n        event: string,\n        callback: (data: any, target: MVVM<any>) => void\n    ) {\n        if (!this.$eventRegister[event]) this.$eventRegister[event] = [];\n        this.$eventRegister[event].push(callback);\n        RegisterEvent(event, callback);\n    }\n    /**发送一个全局事件 */\n    protected $broadcast(event: string, data?: any) {\n        TriggerEvent(event, this, data);\n    }\n    /**触发该组件的某个事件监听 */\n    $Trigger(event, ...data: any[]) {\n        let cbs = this.$eventRegister[event];\n        if (cbs) {\n            cbs.forEach(cb => cb(...data));\n        }\n    }\n    $ToDom(): (HTMLElement | Text)[] {\n        this.$hasRenderedDom = true;\n        if (!this.$root) this.$DoRender();\n        let doms = this.$root.ToDom();\n        return doms;\n    }\n    $ToHtml(): string {\n        return this.$Render().ToHtml();\n    }\n    $GetRoot() {\n        if (!this.$root) this.$DoRender();\n        return this.$root;\n    }\n\n    $SetChildren(children: VNode[]) {\n        this.$children = children;\n    }\n    $GetChildren() {\n        return this.$children;\n    }\n    $Dirty() {\n        if (!this.$isdirty) {\n            this.$isdirty = true;\n            InsertQueue(this);\n        }\n    }\n    $GetDirty() {\n        return this.$isdirty;\n    }\n    $ApplyRefresh() {\n        if (this.$isdirty) {\n            Dev.OnChange(\"update\", [this]);\n            React.ChangeMode('shallow');\n\n            let old = React.target;\n            React.target = this;\n            let newroot = this.$Render();\n            React.target = old;\n\n            React.ChangeMode('deep');\n            let same = MVVM.$compareVNode(this.$root, newroot);\n            if (same) {\n                this.$useOld(this.$root, newroot);\n            }\n            else {\n                if (this.$hasRenderedDom) {\n                    let doms = newroot.ToDom();\n                    let res = this.$root.GetParent().GetSiblingDom(this.$root);\n                    if (res.isparent) {\n                        (res.dom as HTMLElement).append(...doms);\n                    } else {\n                        doms.forEach(dom => {\n                            res.dom.parentNode.insertBefore(dom, res.dom);\n                        });\n                    }\n                    this.$root.Doms.forEach(dom => {\n                        dom.remove();\n                    });\n                }\n                this.$root.GetParent().isMulti = newroot.isMulti;\n                newroot.SetParent(this.$root.GetParent());\n                let oldmvvms = this.$root.GetAllMvvm();\n                if (oldmvvms.length > 0)\n                    Dev.OnChange(\"delete\", oldmvvms);\n                this.$root = newroot;\n                if (this.$hasRenderedDom)\n                    newroot.Rendered();\n\n                let newmvvms = newroot.GetAllMvvm();\n                if (newmvvms.length > 0)\n                    Dev.OnChange(\"new\", newmvvms, { isparent: true, id: this.$id });\n            }\n            this.$isdirty = false;\n        }\n    }\n\n    $DoRender() {\n        this.$onInit();\n        let keys = [];\n        Object.keys(this).forEach(key => {\n            if (!key.startsWith('$')) keys.push(key);\n        });\n        keys.length > 0 && this.$watchObject(this, keys);\n\n        let old = React.target;\n        React.target = this;\n        this.$root = this.$Render();\n        if (!this.$attachedVNode) {\n            this.$attachedVNode = new VNode(\"custom\");\n            this.$attachedVNode.SetMvvm(this);\n        }\n        this.$attachedVNode.isMulti = this.$root.isMulti;\n        this.$root.SetParent(this.$attachedVNode);\n        React.target = old;\n        return this.$root;\n    }\n    private $watchObject(obj: any, keys?: string[]) {\n        if (toString.call(obj) == '[object Object]' || toString.call(obj) == '[object Array]') {\n            let watchers: MVVM<any>[] = [];\n            ((keys && keys.length > 0 && keys) || Object.keys(obj)).forEach(key => {\n                let descriptor = Object.getOwnPropertyDescriptor(obj, key);\n                if (descriptor && descriptor.configurable) {\n                    let value = obj[key];\n                    Object.defineProperty(obj, key, {\n                        get: () => {\n                            if (\n                                React.target &&\n                                watchers.indexOf(React.target)\n                            ) {\n                                watchers.push(React.target);\n                            }\n                            return value;\n                        },\n                        set: val => {\n                            if (val != value) {\n                                watchers.forEach(item => item.$Dirty());\n                                value = val;\n\n                                if (toString.call(value) == \"[object Array]\")\n                                    this.$watchArray(value, watchers);\n                                this.$watchObject(value);\n                            }\n                        },\n                        configurable: false,\n                        enumerable: true\n                    });\n                    if (toString.call(value) == \"[object Array]\")\n                        this.$watchArray(value, watchers);\n                    this.$watchObject(value);\n                }\n            });\n            return;\n        }\n    }\n    private $watchArray(arr, watchers: MVVM<any>[]) {\n        this.$overwriteArrayMethods(arr, 'pop', watchers);\n        this.$overwriteArrayMethods(arr, 'push', watchers);\n        this.$overwriteArrayMethods(arr, 'splice', watchers);\n        this.$overwriteArrayMethods(arr, 'unshift', watchers);\n        this.$overwriteArrayMethods(arr, 'shift', watchers);\n    }\n    private $overwriteArrayMethods(arr: any[], methodname: string, watchers: MVVM<any>[]) {\n        let method = arr[methodname];\n        if (typeof method == 'function') {\n            let descriptor = Object.getOwnPropertyDescriptor(arr, methodname);\n            if (!descriptor || descriptor.configurable) {\n                Object.defineProperty(arr, methodname, {\n                    value: function () {\n                        watchers.forEach(item => item.$Dirty());\n                        return method.apply(this, arguments);\n                    },\n                    configurable: false\n                });\n            }\n        }\n    }\n    private $useOld(oldNode: VNode, newNode: VNode) {\n        if (oldNode.GetType() == 'custom') {\n            let instance = oldNode.GetInstance();\n            let newInstance = newNode.GetInstance();\n            if (instance.$isdirty) {\n                instance.$props = newInstance.$props;\n                instance.$SetChildren(newInstance.$children);\n                instance.$ApplyRefresh();\n            } else {\n                let same = this.$compareProps(instance.$props, newInstance.$props) && this.$compareChildren(instance.$children, newInstance.$children);\n                if (!same) {\n                    instance.$props = newInstance.$props;\n                    instance.$SetChildren(newInstance.$children);\n                    instance.$isdirty = true;\n                    instance.$ApplyRefresh();\n                }\n            }\n            return;\n        }\n        if (oldNode.GetType() == 'standard' || oldNode.GetType() == 'fragment') {\n            if (oldNode.GetType() == 'standard')\n                oldNode.ApplyAttrDiff(newNode.GetAttrs());\n            this.$diff(\n                oldNode.GetChildren(),\n                newNode.GetChildren(),\n                oldNode\n            );\n            return;\n        }\n        if (oldNode.GetType() == 'text') {\n            return;\n        }\n    }\n    $IsParentOf(mvvm: MVVM<any>) {\n        let parentNode = mvvm.$attachedVNode.GetParent();\n        while (parentNode) {\n            if (parentNode.GetInstance() == this) {\n                return true;\n            }\n            parentNode = parentNode.GetParent();\n        }\n        return false;\n    }\n    /**\n     * 对比属性值，相同返回true,不相同返回false\n     */\n    private $compareProps(ps1: { [key: string]: any }, ps2: { [key: string]: any }) {\n        if (toString.call(ps1) == \"[object Object]\" && toString.call(ps2) == \"[object Object]\") {\n            let keys1 = Object.keys(ps1);\n            let keys2 = Object.keys(ps2);\n            let map = {};\n            keys1.forEach(key => {\n                map[key] = 1;\n            });\n            keys2.forEach(key => {\n                if (!map[key])\n                    map[key] = 1;\n                else\n                    map[key]++;\n            });\n            let different = false;\n            Object.keys(map).forEach(key => {\n                if (map[key] != 2) {\n                    different = true;\n                }\n            });\n            if (different)\n                return false;\n            else {\n                for (let i = 0; i < keys1.length; i++) {\n                    let key = keys1[i];\n                    let res = this.$compareProp(ps1[key], ps2[key]);\n                    if (!res)\n                        return false;\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    private $compareChildren(c1, c2) {\n        if (c1 instanceof Array && c2 instanceof Array && c1.length == 0 && c2.length == 0)\n            return true;\n        return c1 === c2;\n    }\n    private $compareProp(p1, p2) {\n        if (typeof p1 == 'function' && typeof p2 == 'function') {\n            if (typeof p1.prototype != 'undefined' && typeof p2.prototype != 'undefined') {\n                if (typeof p1.toString == 'function' && typeof p2.toString == 'function' && p1.toString() == p2.toString()) {\n                    return true;\n                }\n                return false;\n            }\n        }\n        if (p1 !== p2)\n            return false;\n        return true;\n    }\n    private $diff(olds: VNode[], news: VNode[], parent: VNode) {\n        let opers = Diff(olds, news, MVVM.$compareVNode);\n        let index = 0;\n        opers.forEach(item => {\n            if (item.state == 'old') {\n                index++;\n                this.$useOld(item.oldValue, item.newValue);\n                return;\n            }\n            if (item.state == 'new') {\n                if (item.newValueOrigin) {\n                    this.$useOld(item.newValueOrigin, item.newValue);\n                    parent.InsertVNode(item.newValueOrigin, index, this.$hasRenderedDom);\n                } else {\n                    if (this.$hasRenderedDom)\n                        item.newValue.ToDom();\n                    parent.InsertVNode(item.newValue, index, this.$hasRenderedDom);\n                    this.$devNew(item.newValue, index);\n\n                    if (this.$hasRenderedDom)\n                        item.newValue.Rendered();\n                }\n                index++;\n                return;\n            }\n            if (item.state == 'delete') {\n                parent.RemoveVNode(item.oldValue, index, this.$hasRenderedDom && item.isdeprecated);\n                this.$devDelete(item.oldValue);\n                if (item.isdeprecated) {\n                    item.oldValue.Destroy();\n                }\n                return;\n            }\n            if (item.state == 'replace') {\n                parent.RemoveVNode(item.oldValue, index, this.$hasRenderedDom && item.isdeprecated);\n                this.$devDelete(item.oldValue);\n                if (item.isdeprecated) {\n                    item.oldValue.Destroy();\n                }\n                if (item.newValueOrigin) {\n                    this.$useOld(item.newValueOrigin, item.newValue);\n                    parent.InsertVNode(item.newValueOrigin, index, this.$hasRenderedDom);\n                } else {\n                    if (this.$hasRenderedDom)\n                        item.newValue.ToDom();\n                    parent.InsertVNode(item.newValue, index, this.$hasRenderedDom);\n                    this.$devNew(item.newValue, index);\n                    if (this.$hasRenderedDom)\n                        item.newValue.Rendered();\n                }\n                index++;\n            }\n        });\n    }\n    private $devDelete(vnode: VNode) {\n        let mvvms = vnode.GetAllMvvm();\n        if (mvvms.length > 0) {\n            Dev.OnChange(\"delete\", mvvms);\n        }\n    }\n\n    private $devNew(vnode: VNode, index) {\n        let mvvms = vnode.GetAllMvvm();\n        if (mvvms.length > 0) {\n            let nextmvvm = null;\n            let parent = vnode.GetParent();\n            if (parent.GetChildren().length - 1 > index) {\n                let nextsibling = parent.GetChildren()[index + 1];\n                nextmvvm = nextsibling.GetFirstChildMvvm();\n                if (nextmvvm)\n                    Dev.OnChange(\"new\", mvvms, { isparent: false, id: nextmvvm.$id });\n            }\n            if (!nextmvvm)\n                Dev.OnChange(\"new\", mvvms, { isparent: true, id: parent.GetNearestAncestorMvvm().$id });\n        }\n    }\n\n    $Rendered() {\n        this.$root.Rendered();\n        this.$onRendered();\n    }\n    $Destroy() {\n        this.$isDestroyed = true;\n        this.$onDestroyed();\n        this.$root.Destroy();\n    }\n    $IsDestroyed() {\n        return this.$isDestroyed;\n    }\n    $AttachVNode(vnode: VNode) {\n        this.$attachedVNode = vnode;\n    }\n    $AppendTo(elem: string | HTMLElement) {\n        let dom: HTMLElement;\n        if (typeof elem == 'string') {\n            dom = document.querySelector(elem);\n        } else {\n            dom = elem;\n        }\n        dom.append(...this.$ToDom());\n        this.$mountDom = dom;\n        this.$Rendered();\n        Dev.AddMvvm(this);\n    }\n    $GetMountDom() {\n        return this.$mountDom;\n    }\n    $GetAttachedVNode() {\n        return this.$attachedVNode;\n    }\n    static $compareVNode(left: VNode, right: VNode) {\n        if (left.GetAttr('key') != right.GetAttr('key')) {\n            return false;\n        }\n        if (left.GetType() != right.GetType()) {\n            return false;\n        }\n        if (left.GetType() == 'custom') {\n            if (\n                left.GetInstance().constructor !=\n                right.GetInstance().constructor\n            ) {\n                return false;\n            }\n        }\n        if (left.GetType() == 'standard') {\n            if (left.GetTag() != right.GetTag()) return false;\n        }\n        if (left.GetType() == 'text') {\n            if (left.GetText() != right.GetText()) return false;\n        }\n        return true;\n    }\n    GetProps() {\n        return this.$props;\n    }\n}\n","import { ApplyAttr, RemoveAttr, SerializeAttr, GetEventAttrName as EventName } from './attribute';\nimport { MVVM } from './MVVM';\nimport { Ref } from './react';\n\nexport class VNode {\n    /**虚拟节点名称，即标准html的标签名 */\n    protected tag: string = '';\n    private text: string = '';\n    /**子节点 */\n    protected children: VNode[] = [];\n    /**属性集合 */\n    private attrs: { [key: string]: any } = {};\n    /**父节点 */\n    private parent: VNode = null;\n\n    /**关联的组件实例，当type='custom'有效 */\n    private mvvm: MVVM<any>;\n    /**关联的实际dom元素 */\n    private dom: (HTMLElement | Text);\n    /**节点类型 */\n    private type: 'standard' | 'custom' | 'text' | 'fragment';\n    /**是否已经被销毁 */\n    private isDestroyed = false;\n    /**是否是多dom节点 */\n    isMulti: boolean = false;\n\n    constructor(type: 'standard' | 'custom' | 'text' | 'fragment') {\n        this.type = type;\n    }\n    get Doms(): (HTMLElement | Text)[] {\n        if (this.type == \"standard\" || this.type == \"text\")\n            return [this.dom];\n        if (this.type == \"fragment\") {\n            let doms = [];\n            this.children.forEach(child => {\n                doms = doms.concat(child.Doms);\n            });\n            return doms;\n        }\n        if (this.type == \"custom\")\n            return this.mvvm.$GetRoot().Doms;\n    }\n    SetTag(tag: string) {\n        this.tag = tag;\n    }\n    GetTag() {\n        return this.tag;\n    }\n    GetText() {\n        return this.text;\n    }\n    SetText(text: string) {\n        this.text = text;\n    }\n    SetMvvm(component: MVVM<any>) {\n        this.mvvm = component;\n    }\n    GetInstance() {\n        return this.mvvm;\n    }\n    GetParent() {\n        return this.parent;\n    }\n    InsertVNode(child: VNode, index: number, domchange: boolean) {\n        //虚拟dom操作\n        this.children.splice(index, 0, child);\n        child.parent = this;\n        if (domchange) {\n            let res = this.GetSiblingDom(child);\n            let doms = child.Doms;\n            if (res.isparent) {\n                (res.dom as HTMLElement).append(...doms);\n            } else {\n                doms.forEach(dom => {\n                    res.dom.parentNode.insertBefore(dom, res.dom);\n                });\n            }\n        }\n    }\n    //child是当前节点的子节点，获取child的dom，如果没有就找child后的相邻节点的dom，如果都没有就返回父节点\n    GetSiblingDom(child: VNode): { dom: HTMLElement | Text, isparent: boolean } {\n        if (this.type == 'custom') {\n            if (this.parent)\n                return this.parent.GetSiblingDom(this);\n            return { dom: this.mvvm.$GetMountDom(), isparent: true };\n        }\n        let index = this.children.indexOf(child);\n        index++;\n        while (index < this.children.length) {\n            let child = this.children[index];\n            let doms = child.Doms;\n            if (doms.length > 0)\n                return { dom: doms[0], isparent: false };\n            index++;\n        }\n        if (this.isMulti)\n            return this.parent.GetSiblingDom(this);\n        return { dom: this.dom, isparent: true };\n    }\n    /**移除一个孩子节点，注意会引发dom操作 */\n    RemoveVNode(child: VNode, index: number, domchange: boolean = true) {\n        this.children.splice(index, 1);\n        if (domchange) {\n            let doms = child.Doms;\n            if (doms)\n                doms.forEach(dom => {\n                    dom.parentNode.removeChild(dom);\n                });\n        }\n    }\n    SetChildren(children: VNode[]) {\n        children.forEach(child => {\n            child.parent = this;\n        });\n        this.children = children;\n    }\n    IsDestroyed() {\n        return this.isDestroyed;\n    }\n    Destroy() {\n        this.isDestroyed = true;\n        if (this.type == 'custom') {\n            this.mvvm.$Destroy();\n        }\n        this.children.forEach(child => {\n            child.Destroy();\n        });\n    }\n    GetChildren() {\n        return this.children;\n    }\n    /**渲染完毕后的回调 */\n    Rendered() {\n        if (this.type == 'custom') this.mvvm.$Rendered();\n        if (this.type == 'standard' || this.type == 'fragment') {\n            this.children.forEach(child => {\n                child.Rendered();\n            });\n        }\n        if (this.attrs['ref'] instanceof Ref) {\n            if (this.type == \"standard\")\n                this.attrs['ref'].current = (this.dom as HTMLElement);\n            else {\n                if (this.type == \"custom\") {\n                    this.attrs['ref'].current = this.mvvm;\n                }\n            }\n        }\n    }\n\n    GetType() {\n        return this.type;\n    }\n\n    SetAttr(name: string, value: any) {\n        this.attrs[name] = value;\n    }\n    GetAttr(name: string) {\n        return this.attrs[name];\n    }\n    GetAttrs() {\n        return this.attrs;\n    }\n    SetParent(vnode: VNode) {\n        this.parent = vnode;\n    }\n    ApplyAttrDiff(newAttrs: { [key: string]: any }) {\n        Object.keys(this.attrs).forEach(key => {\n            let eventName = EventName(key);\n            let isEvent = eventName != null;\n            if (newAttrs[key] == null) {\n                //删除的属性\n                if (isEvent) {\n                    (this.dom as HTMLElement).removeEventListener(\n                        eventName,\n                        this.attrs[key]\n                    );\n                } else {\n                    RemoveAttr(this.dom as HTMLElement, key, this.attrs[key]);\n                }\n            } else {\n                //已存在的属性\n                if (\n                    key == 'style' &&\n                    toString.call(this.attrs.style) == '[object Object]' &&\n                    toString.call(newAttrs.style) == '[object Object]'\n                ) {\n                    let oldStyle = this.attrs.style;\n                    let newStyle = newAttrs.style;\n                    for (let key in oldStyle) {\n                        if (!newStyle[key]) {\n                            (this.dom as HTMLElement).style[key] = '';\n                        } else {\n                            if (newStyle[key] != oldStyle[key]) {\n                                (this.dom as HTMLElement).style[key] =\n                                    newStyle[key];\n                            }\n                        }\n                    }\n                    for (let key in newStyle) {\n                        if (!oldStyle[key]) {\n                            (this.dom as HTMLElement).style[key] =\n                                newStyle[key];\n                        }\n                    }\n                    return;\n                }\n                if (isEvent) {\n                    if (this.attrs[key] != newAttrs[key]) {\n                        this.dom.removeEventListener(\n                            eventName,\n                            this.attrs[key]\n                        );\n                        this.dom.addEventListener(\n                            eventName,\n                            newAttrs[key]\n                        );\n                    }\n                } else {\n                    if (this.attrs[key] != newAttrs[key]) {\n                        RemoveAttr(<HTMLElement>this.dom, key, this.attrs[key]);\n                        ApplyAttr(\n                            <HTMLElement>this.dom,\n                            key,\n                            newAttrs[key]\n                        );\n                    }\n                }\n            }\n        });\n        Object.keys(newAttrs).forEach(key => {\n            let eventName = EventName(key);\n            let isEvent = eventName != null;\n            if (this.attrs[key] == null) {\n                //新增属性\n                if (isEvent) {\n                    (this.dom as HTMLElement).addEventListener(\n                        eventName,\n                        newAttrs[key]\n                    );\n                } else {\n                    ApplyAttr(\n                        <HTMLElement>this.dom,\n                        key,\n                        newAttrs[key]\n                    );\n                }\n            }\n        });\n        this.attrs = newAttrs;\n    }\n    ToHtml(): string {\n        if (this.type == 'text') return this.text;\n        if (this.type == 'custom') {\n            let html = this.mvvm.$ToHtml();\n            return html;\n        }\n        if (this.type == 'standard') {\n            let innerhtmls: string[] = [];\n\n            innerhtmls.push(`<${this.tag}`);\n            Object.keys(this.attrs).forEach(key => {\n                let attrStr = SerializeAttr(key, this.attrs[key]);\n                if (attrStr) innerhtmls.push(' ' + attrStr);\n            });\n            innerhtmls.push('>');\n\n            this.children.forEach(child => {\n                let res = child.ToHtml();\n                innerhtmls.push(res);\n            });\n            innerhtmls.push(`</${this.tag}>`);\n            return innerhtmls.join('');\n        }\n        if (this.type == 'fragment') {\n            let innerhtmls: string[] = [];\n\n            this.children.forEach(child => {\n                let res = child.ToHtml();\n                innerhtmls.push(res);\n            });\n            return innerhtmls.join('');\n        }\n    }\n    ToDom(): (HTMLElement | Text)[] {\n        if (this.type == 'custom') {\n            let doms = this.mvvm.$ToDom();\n            return doms;\n        }\n        if (this.type == 'standard') {\n            let elem = document.createElement(this.tag);\n            this.dom = elem;\n            Object.keys(this.attrs).forEach(key => {\n                let eventName = EventName(key);\n                if (eventName) {\n                    elem.addEventListener(eventName, this.attrs[key]);\n                } else ApplyAttr(elem, key, this.attrs[key]);\n            });\n            this.children.forEach(child => {\n                let doms = child.ToDom();\n                doms.forEach(dom => elem.appendChild(dom));\n            });\n            return [elem];\n        }\n        if (this.type == 'fragment') {\n            let children: (HTMLElement | Text)[] = [];\n            this.children.forEach(child => {\n                let doms = child.ToDom();\n                children = children.concat(doms);\n            });\n            return children;\n        }\n        if (this.type == 'text') {\n            let text = document.createTextNode(this.text);\n            this.dom = text;\n            return [text];\n        }\n    }\n    EmitUp(event: string, ...data: any[]) {\n        if (this.parent) {\n            if (this.parent.type == 'custom')\n                this.parent.mvvm.$Trigger(event, ...data);\n            this.parent.EmitUp(event, ...data);\n        }\n    }\n    EmitDown(event: string, ...data: any[]) {\n        this.children.forEach(child => {\n            if (child.type == 'custom') {\n                child.mvvm.$Trigger(event, ...data);\n            }\n            child.EmitDown(event, ...data);\n        });\n    }\n\n    AttachDom(dom: HTMLElement | Text) {\n        this.dom = dom;\n        Object.keys(this.attrs).forEach(key => {\n            let eventName = EventName(key);\n            if (eventName) {\n                dom.addEventListener(eventName, this.attrs[key]);\n            }\n        });\n    }\n    GetNearestAncestorMvvm(): MVVM<any> {\n        if (this.type == \"custom\")\n            return this.mvvm;\n        return this.parent && this.parent.GetNearestAncestorMvvm();\n    }\n    GetFirstChildMvvm(): MVVM<any> {\n        if (this.type == \"custom\")\n            return this.mvvm;\n        for (let i = 0; i < this.children.length; i++) {\n            let mvvm = this.children[i].GetFirstChildMvvm();\n            if (mvvm)\n                return mvvm;\n        }\n        return null;\n    }\n    GetAllMvvm(): MVVM<any>[] {\n        if (this.type == \"custom\")\n            return [this.mvvm];\n        if (this.type == 'text')\n            return [];\n        if (this.type == \"standard\" || this.type == \"fragment\") {\n            let total = [];\n            this.children.forEach(child => {\n                total = total.concat(child.GetAllMvvm());\n            });\n            return total;\n        }\n        return [];\n    }\n}\n","export const VNODE_ID = '__decorator__';\nlet $isServerRender = false;\nexport function ServerRender(isServerRender: boolean) {\n    $isServerRender = isServerRender;\n}\nconst applyAttr: { [name: string]: (elem: HTMLElement, value: any) => boolean } = {\n    style: (elem, value) => {\n        if (toString.call(value) == '[object Object]') {\n            for (let key in value) {\n                elem.style[key] = value[key];\n            }\n            return true;\n        }\n        return false;\n    },\n    className: (elem, value) => {\n        elem.setAttribute('class', value);\n        return true;\n    },\n    key: (elem, value) => {\n        return true;\n    },\n    ref: (elem, value) => {\n        return true;\n    },\n    value(elem, value) {\n        if (elem instanceof HTMLInputElement) {\n            elem.value = value;\n            return true;\n        }\n        return false;\n    }\n};\nconst removeAttr: { [name: string]: (elem: HTMLElement, value: any) => boolean } = {\n    style: (elem, value) => {\n        if (toString.call(value) == '[object Object]') {\n            for (let key in value) {\n                elem.style[key] = '';\n            }\n            return true;\n        }\n        return false;\n    },\n    className: (elem, value) => {\n        elem.setAttribute('class', '');\n        return true;\n    },\n    key: (elem, value) => {\n        return true;\n    },\n    value(elem, value) {\n        if (elem instanceof HTMLInputElement) {\n            elem.value = '';\n            return true;\n        }\n        return false;\n    }\n};\nconst serializeAttr: { [name: string]: (value: any) => string } = {\n    style: value => {\n        if (toString.call(value) == '[object Object]') {\n            let str = '';\n            for (let key in value) {\n                str += `${key}=${value[key]};`;\n            }\n            return `style=\"${str}\"`;\n        } else {\n            return 'style=' + value;\n        }\n    },\n    className: value => {\n        return 'class=' + value;\n    },\n    key: value => {\n        return '';\n    },\n    ref: value => {\n        return '';\n    },\n    [VNODE_ID]: value => {\n        if ($isServerRender) return VNODE_ID + '=' + value;\n        else return '';\n    }\n};\n/**toHtml方法使用 */\nexport function SerializeAttr(name: string, value: any): string {\n    if (toString.call(value) == '[object Function]') {\n        return '';\n    }\n    if (serializeAttr[name]) {\n        return serializeAttr[name](value);\n    } else {\n        return name + '=' + value;\n    }\n}\n/**toDom方法使用 */\nexport function ApplyAttr(elem: HTMLElement, name: string, value: any) {\n    if (applyAttr[name]) {\n        let res = applyAttr[name](elem, value);\n        if (res)\n            return;\n    }\n    elem.setAttribute(name, value);\n}\nexport function RemoveAttr(elem: HTMLElement, name: string, value: any) {\n    if (removeAttr[name]) {\n        let res = removeAttr[name](elem, value);\n        if (res)\n            return;\n    }\n    elem.setAttribute(name, '');\n}\nexport function GetEventAttrName(attr: string) {\n    if (/^on([A-Z][a-z]+)+$/.test(attr)) {\n        return attr.slice(2).toLowerCase();\n    }\n    return null;\n}\n","import { VNode } from './VNode';\nimport { MVVM } from \"./MVVM\";\n\ninterface Instance {\n    name: string,\n    data: { [key: string]: any };\n    props: { [key: string]: any };\n    children: Instance[];\n}\ntype Listener = ((type: 'new' | 'update' | 'delete', mvvmjson: Instance[], extra?: { isparent: boolean, id: number }) => void);\nclass Dev {\n    roots: MVVM<any>[] = [];\n    listeners: Listener[] = [];\n    Subscribe(listener: Listener, init: (mvvms: Instance[]) => void) {\n        if (this.listeners.indexOf(listener) == -1) {\n            if (this.roots) {\n                init(this.toJson());\n            }\n            this.listeners.push(listener);\n        }\n    }\n    AddMvvm(mvvm: MVVM<any>) {\n        this.roots.push(mvvm);\n        this.listeners.forEach(item => {\n            item(\"new\", this.getMvvm(mvvm.$GetAttachedVNode()));\n        });\n    }\n    Unsubscribe(listener: Listener) {\n        this.listeners = this.listeners.filter(item => item != listener);\n    }\n    toJson() {\n        let mvvms = [];\n        if (this.roots) {\n            this.roots.forEach(root => {\n                mvvms = mvvms.concat(this.getMvvm(root.$GetAttachedVNode()));\n            });\n        }\n        return mvvms;\n    }\n    getMvvm(vnode: VNode): Instance[] {\n        if (vnode.GetType() == \"standard\" || vnode.GetType() == 'text') {\n            let children = [];\n            vnode.GetChildren().forEach(child => {\n                children = children.concat(this.getMvvm(child));\n            });\n            return children;\n        }\n        if (vnode.GetType() == \"fragment\") {\n            let vnodeObj = { name: \"fragment\", data: null, props: null, children: [] };\n            vnode.GetChildren().forEach(child => {\n                let res = this.getMvvm(child);\n                if (res)\n                    vnodeObj.children = vnodeObj.children.concat(res);\n            });\n            return [vnodeObj];\n        }\n        if (vnode.GetType() == \"custom\") {\n            let name = vnode.GetInstance().constructor.name;\n            let data = {};\n            Object.keys(vnode.GetInstance()).forEach(key => {\n                if (!key.startsWith(\"$\") || key == \"$id\") {\n                    data[key] = vnode.GetInstance()[key];\n                }\n            });\n            let vnodeObj = { name: name, data: data, props: vnode.GetInstance().GetProps(), children: this.getMvvm(vnode.GetInstance().$GetRoot()) };\n            return [vnodeObj];\n        }\n        throw new Error(\"vnode type error\");\n    }\n    OnChange(type: 'new' | 'update' | 'delete', mvvms: MVVM<any>[], extra?: { isparent: boolean, id: number }) {\n        let instances: Instance[] = [];\n        mvvms.forEach(mvvm => {\n            let instance: Instance = { name: mvvm.constructor.name, props: mvvm.GetProps(), data: {}, children: [] };\n            Object.keys(mvvm).forEach(key => {\n                if (!key.startsWith(\"$\") || key == \"$id\") {\n                    instance.data[key] = mvvm[key];\n                }\n            });\n            if (type == \"new\") {\n                instance.children = this.getMvvm(mvvm.$GetRoot());\n            }\n            instances.push(instance);\n        });\n        this.listeners.forEach(listener => {\n            listener(type, instances, extra);\n        });\n    }\n}\nlet dev = new Dev();\n(window as any).__noreact_dev = dev;\nexport default dev;\n","export function Diff<T>(\n    oldset: T[],\n    newset: T[],\n    compare: (left: T, right: T) => boolean\n) {\n    let o2n = {};\n    let n2o = {};\n    let square: SquareUnit[][] = initSquare(oldset, newset);\n    findShortest<T>(square, oldset, newset, compare, o2n, n2o);\n    let opers = getOpers(square, oldset, newset, o2n, n2o);\n    opers.reverse();\n    return opers;\n}\n\nfunction findShortest<T>(\n    square: SquareUnit[][],\n    oldset: T[],\n    newset: T[],\n    compare: (left: T, right: T) => boolean,\n    o2n,\n    n2o\n): number {\n    let target = square[oldset.length][newset.length];\n    if (target.value != -1) return target.value;\n\n    let lastnum = 0;\n    let same = compare(oldset[oldset.length - 1], newset[newset.length - 1]);\n    if (same) {\n        lastnum = 0;\n        o2n[oldset.length - 1] = newset.length - 1;\n        n2o[newset.length - 1] = oldset.length - 1;\n    }\n    else lastnum = 1;\n    let p1 =\n        findShortest(\n            square,\n            oldset.slice(0, oldset.length - 1),\n            newset,\n            compare,\n            o2n,\n            n2o\n        ) + 1;\n    let p2 =\n        findShortest(\n            square,\n            oldset,\n            newset.slice(0, newset.length - 1),\n            compare,\n            o2n,\n            n2o\n        ) + 1;\n    let p3 =\n        findShortest(\n            square,\n            oldset.slice(0, oldset.length - 1),\n            newset.slice(0, newset.length - 1),\n            compare,\n            o2n,\n            n2o\n        ) + lastnum;\n\n    let min = Math.min(p1, p2, p3);\n    target.value = min;\n\n    if (min == p1) {\n        target.fromRow = oldset.length - 1;\n        target.fromColumn = newset.length;\n    } else {\n        if (min == p2) {\n            target.fromRow = oldset.length;\n            target.fromColumn = newset.length - 1;\n        } else {\n            target.fromRow = oldset.length - 1;\n            target.fromColumn = newset.length - 1;\n        }\n    }\n\n    return target.value;\n}\nfunction initSquare<T>(oldset: T[], newset: T[]) {\n    let square: SquareUnit[][] = [];\n    for (let i = 0; i <= oldset.length; i++) {\n        let row = [];\n        for (let j = 0; j <= newset.length; j++) {\n            if (i == 0) {\n                row.push({ value: j, fromRow: 0, fromColumn: j - 1 });\n                continue;\n            }\n            if (j == 0) {\n                row.push({ value: i, fromRow: i - 1, fromColumn: 0 });\n                continue;\n            }\n            row.push({ value: -1, fromRow: -1, fromColumn: -1 });\n        }\n        square.push(row);\n    }\n    return square;\n}\n\ninterface SquareUnit {\n    value: number;\n    fromRow: number;\n    fromColumn: number;\n}\ninterface NextState<T> {\n    oldValue?: T;\n    isdeprecated?: boolean,\n    /**当state为old类型时newValue表示新值 */\n    newValue?: T;\n    newValueOrigin?: T;\n    state: 'new' | 'delete' | 'old' | 'replace';\n}\n\nfunction getOpers<T>(\n    square: SquareUnit[][],\n    oldset: T[],\n    newset: T[],\n    o2n,\n    n2o\n): NextState<T>[] {\n    let column = newset.length;\n    let row = oldset.length;\n\n    let states: NextState<T>[] = [];\n    while (true) {\n        if (row == 0 && column == 0) {\n            break;\n        }\n        let unit = square[row][column];\n        if (unit.fromColumn == column - 1 && unit.fromRow == row - 1) {\n            if (unit.value != square[row - 1][column - 1].value) {\n                states.push({\n                    oldValue: oldset[row - 1],\n                    isdeprecated: o2n[row - 1] == null,\n                    state: 'replace',\n                    newValue: newset[column - 1],\n                    newValueOrigin: oldset[n2o[column - 1]]\n                });\n            } else {\n                states.push({\n                    oldValue: oldset[row - 1],\n                    state: 'old',\n                    newValue: newset[column - 1]\n                });\n            }\n            row--;\n            column--;\n            continue;\n        }\n        if (unit.fromColumn == column && unit.fromRow == row - 1) {\n            states.push({ oldValue: oldset[row - 1], state: 'delete', isdeprecated: o2n[row - 1] == null });\n            row--;\n            continue;\n        }\n        if (unit.fromColumn == column - 1 && unit.fromRow == row) {\n            states.push({ newValue: newset[column - 1], state: 'new', newValueOrigin: oldset[n2o[column - 1]] });\n            column--;\n            continue;\n        }\n    }\n    return states;\n}\n","let events: { [name: string]: Function[] } = {};\n\nexport function RegisterEvent(event: string, func: Function) {\n    if (!events[event]) {\n        events[event] = [];\n    }\n    events[event].push(func);\n}\nexport function TriggerEvent(event: string, ...args: any[]) {\n    if (events[event]) {\n        events[event].forEach(func => {\n            func(...args);\n        });\n    }\n}\n","export { MVVM } from './MVVM';\nexport { React, Ref, Fragment } from './react';\nexport { VNode } from './VNode';\nexport { default as Dev } from './dev';","import { VNode } from './VNode';\nimport { MVVM } from './MVVM';\nimport { VNODE_ID } from './attribute';\n\nconst isInBrowser = new Function(\n    'try {return this===window;}catch(e){ return false;}'\n);\nclass NoReact {\n    private mode: 'deep' | 'shallow' = 'deep';\n    public target: MVVM<any>;\n    createElement(\n        Elem: string | (typeof MVVM) | typeof Fragment,\n        attrs: { [key: string]: any },\n        ...children: (VNode | VNode[] | string)[]\n    ): VNode {\n        let allchildren: VNode[] = [];\n        this.flatten('', children, allchildren);\n\n        if (typeof Elem == 'string') {\n            let vnode: VNode = new VNode('standard');\n            vnode.SetTag(Elem);\n            vnode.isMulti = false;\n\n            if (attrs != null) {\n                for (let key in attrs) {\n                    vnode.SetAttr(key, attrs[key]);\n                }\n            }\n            vnode.SetChildren(allchildren);\n            return vnode;\n        }\n        if (Elem == Fragment) {\n            let vnode: VNode = new VNode('fragment');\n            vnode.isMulti = true;\n            vnode.SetChildren(allchildren);\n            if (attrs != null) {\n                for (let key in attrs) {\n                    vnode.SetAttr(key, attrs[key]);\n                }\n            }\n            return vnode;\n        }\n        if ((Elem as Function).prototype instanceof MVVM) {\n            let vnode = new VNode('custom');\n            let mvvm = new (Elem as any)(attrs) as MVVM<any>;\n\n            vnode.SetMvvm(mvvm);\n            mvvm.$SetChildren(allchildren);\n            mvvm.$AttachVNode(vnode);\n            if (this.mode == 'deep') {\n                let root = mvvm.$DoRender();\n                vnode.isMulti = root.isMulti;\n            }\n\n            if (attrs != null) {\n                for (let key in attrs) {\n                    vnode.SetAttr(key, attrs[key]);\n                }\n            }\n            return vnode;\n        }\n    }\n\n    private flatten(prefix: string, children: any[], res: VNode[]) {\n        children.forEach((child, index) => {\n            if (child == null) return;\n            if (child instanceof Array) {\n                this.flatten(prefix + index + '_', child, res);\n            } else {\n                if (child instanceof VNode) {\n                    let key = child.GetAttr('key');\n                    if (key != null) {\n                        res.push(child);\n                    } else {\n                        child.SetAttr('key', prefix + index);\n                        res.push(child);\n                    }\n                } else {\n                    let textnode = new VNode('text');\n                    textnode.SetText(child + '');\n                    textnode.SetAttr('key', prefix + index);\n                    res.push(textnode);\n                }\n            }\n        });\n    }\n    ChangeMode(mode: 'shallow' | 'deep') {\n        this.mode = mode;\n    }\n}\nexport class Fragment {\n\n}\nexport class Ref {\n    current: HTMLElement | MVVM<any>;\n}\nexport const React = new NoReact();\n\nlet counter=0;\nexport function GetId(){\n    return counter++;\n}\n","import { MVVM } from './MVVM';\n\nlet queue: MVVM<any>[] = [];\nlet tempQueue: MVVM<any>[] = [];\nlet maxLoop = 10;\nlet counter = 0;\n\nlet promise: Promise<void>;\nexport function InsertQueue(mvvm: MVVM<any>) {\n    if (queue.indexOf(mvvm) != -1) {\n        return;\n    }\n    queue.push(mvvm);\n\n    if (!promise && queue.length > 0) {\n        promise = new Promise((resolve, reject) => {\n            resolve();\n        }).then(() => {\n            tempQueue = queue;\n            queue = [];\n            counter = 0;\n            Refresh();\n            promise = null;\n        });\n    }\n}\nfunction Refresh() {\n    while (true) {\n        tempQueue.sort((m1: MVVM<any>, m2: MVVM<any>) => {\n            if (m1.$IsParentOf(m2)) {\n                return -1;\n            }\n            if (m2.$IsParentOf(m1)) {\n                return 1;\n            }\n            return 0;\n        });\n        if (counter > maxLoop) {\n            throw new Error(\"refresh loop more than \" + maxLoop);\n        }\n        counter++;\n        tempQueue.forEach(root => {\n            if (!root.$IsDestroyed() && root.$GetDirty())\n                root.$ApplyRefresh();\n        });\n        if (queue.length == 0)\n            break;\n        tempQueue = queue;\n        queue = [];\n    }\n}\n"],"sourceRoot":""}